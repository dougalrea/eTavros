{"version":3,"sources":["lib/api.js","lib/auth.js","components/Trading/IndexCard.js","components/Trading/TradingPairsIndex.js","components/utils/useForm.js","components/Trading/FormTrade.js","components/Trading/Chart.js","components/Trading/TradingPairShow.js","components/common/ImageUploadField.js","components/common/FormRegister.js","components/common/FormLogin.js","components/common/Nav.js","components/common/LandingPage.js","App.js","index.js"],"names":["baseUrl","getOneTradingPair","name","axios","get","getAllTradingPairs","get24HourData","getHistoricalData","interval","headers","Interval","registerUser","formdata","post","loginUser","getUserProfile","token","Authorization","performTrade","put","createTradePost","postData","createComment","favouriteCoin","unfavouriteCoin","getToken","window","localStorage","getItem","getPayload","parts","split","length","JSON","parse","atob","IndexCard","tradingPair","ticker","React","useState","liveMarketData","setLiveMarketData","socketRef","useRef","thousandsSeparators","num","numParts","toString","replace","join","useEffect","current","WebSocket","toLowerCase","onmessage","event","a","message","data","console","log","close","rounded","bg","color","p","templateColumns","gap","alignItems","fontSize","colSpan","size","src","symbol","alt","fontWeight","toUpperCase","parseFloat","c","toFixed","startColor","endColor","height","P","h","l","total_suppy","v","to","w","TradingPairsIndex","undefined","tradingPairData","setTradingPairData","userData","setUserData","getTradingPairData","getUserData","minW","minH","pr","pl","overflow","borderColor","borderWidth","variant","mt","ml","_selected","boxShadow","pb","colStart","colEnd","spacing","map","id","sort","b","key","filter","favourited_by","includes","useForm","initialState","setFormdata","errors","setErrors","handleChange","value","target","nextState","FormTrade","orderType","setTradingPairDataFound","balanceChangeTicker","setBalanceChangeTicker","lastPrice","setLastPrice","error","setError","useParams","refreshLastPrice","amountValue","totalValue","handleFocus","e","preventDefault","toast","useToast","handleTrade","amount","total","tradingPairName","buy","title","description","status","duration","isClosable","cash_balance","setTimeout","action","onSubmit","isRequired","textAlign","as","FaWallet","mr","borderRadius","children","min","precision","keepWithinRange","type","aria-label","onFocus","onChange","toPrecision","_hover","Chart","setLastDayData","candleSeries","setCandleSeries","chartHasGenerated","setChartHasGenerated","ref","chart","dayVolumeTicker","generateChart","createChart","width","innerWidth","innerHeight","layout","backgroundColor","textColor","grid","vertLines","horzLines","crosshair","mode","CrosshairMode","Normal","rightPriceScale","timeScale","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","getLastDayData","getHistoricalKline","setData","candlestick","k","ed","dd","H_","t","Cs","update","time","open","o","high","low","TradingPairShow","setTradingPair","lastDayData","setInterval","tradingPairDataFound","commentsEndRef","text","handleFavourite","some","user","handleComment","trading_pair","scrollIntoView","behaviour","scrollToBottomComments","maxW","maxH","padding","templateRows","rowStart","rowEnd","mb","rowSpan","volume","placement","flip","Button","rightIcon","ChevronDown","_expanded","onClick","border","direction","BsStarFill","BsStar","profile_image","comments","comment","owner","sub","alignSelf","bull_or_bear","username","isChecked","align","Edit","Chat","placeholder","trade_posts","bought_or_sold","Date","created_at","toLocaleDateString","toLocaleTimeString","reverse","ImageUploadField","uploadUrl","process","handleUpload","FormData","append","files","res","url","delete","boxSize","objectFit","pt","className","FormRegister","registered","email","password","password_confirmation","handleRegister","then","response","request","config","Email","AtSign","Lock","FormLogin","loggedIn","credential","handleLogin","setItem","Nav","theme","extendTheme","fonts","heading","isOpenLogin","setIsOpenLogin","isOpenRegister","setIsOpenRegister","isOpenWallet","setIsOpenWallet","tradingPairsArray","setTradingPairsArray","totalPortfolioValue","setTotalPortfolioValue","dollarValuesArray","walletBalancesArray","closeRegister","closeLogin","getTradingPairsArray","getLastPrice","coin","push","lastPriceObject","multiplyLastPriceAndBalance","relevantCoin","find","reduce","acc","curr","justify","wrap","display","base","md","flexBasis","onClose","isOpen","borderBottomWidth","slice","onOpen","closeOnBlur","returnFocus","persistentFocus","removeItem","LandingPage","CheckCircleIcon","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6699c35.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api'\n\nexport function getOneTradingPair(name) {\n  return axios.get(`${baseUrl}/markets/${name}/`)\n}\n\nexport function getAllTradingPairs() {\n  return axios.get(`${baseUrl}/markets/`)\n}\n\nexport function get24HourData(name) {\n  return axios.get(`${baseUrl}/markets/${name}/history/day/`)\n}\n\nexport function getHistoricalData(name, interval) {\n  return axios.get(`${baseUrl}/markets/${name}/history/`, {\n    headers: {\n      Interval: `${interval}`\n    }\n  })\n}\n\nexport function registerUser(formdata) {\n  return (\n    axios.post(`${baseUrl}/auth/register/`, formdata)\n  )\n}\n\nexport function loginUser(formdata) {\n  return axios.post(`${baseUrl}/auth/login/`, formdata)\n}\n\nexport function getUserProfile(token) {\n  return axios.get(`${baseUrl}/auth/profile/`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n}\n\nexport function performTrade(formdata, token) {\n  return axios.put(`${baseUrl}/auth/profile/`, formdata, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n}\n\nexport function createTradePost(postData, token) {\n  return axios.post(`${baseUrl}/tradeposts/`, postData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n}\n\nexport function createComment(formdata, token) {\n  return axios.post(`${baseUrl}/comments/`, formdata, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n}\n\nexport function favouriteCoin(name, token) {\n  return axios.post(`${baseUrl}/markets/${name}/favourite/`, name, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n}\n\nexport function unfavouriteCoin(name, token) {\n  return axios.put(`${baseUrl}/markets/${name}/favourite/`, name, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n}\n","export function setToken(token) {\n  console.log(token)\n  window.localStorage.setItem('token', token)\n}\n\nexport function getToken() {\n  return window.localStorage.getItem('token')\n}\n\nexport function getPayload() {\n  const token = getToken()\n  if (!token) return false\n  const parts = token.split('.')\n  if (parts.length < 3) return false\n  return JSON.parse(window.atob(parts[1]))\n}\n\nexport function logoutUser() {\n  window.localStorage.removeItem('token')\n}","import { Avatar, Box, Text, Grid, GridItem, Button, Skeleton } from '@chakra-ui/react'\nimport { Link } from 'react-router-dom'\nimport React from 'react'\n\n\nfunction IndexCard({ tradingPair, ticker }) {\n  const [liveMarketData, setLiveMarketData] = React.useState(null)\n  const socketRef = React.useRef()\n\n  const thousandsSeparators = (num) => {\n    const numParts = num.toString().split('.')\n    numParts[0] = numParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    return numParts.join('.')\n  }\n\n  React.useEffect(() => {\n    const getLiveDataFeed = () => {\n      socketRef.current = new WebSocket(`wss://stream.binance.com:9443/ws/${ticker.toString().toLowerCase()}busd@ticker`)\n      socketRef.current.onmessage = async (event) => {\n        const message = JSON.parse(event?.data)\n        setLiveMarketData(message)\n      }\n    }\n    if (tradingPair) {\n      getLiveDataFeed()\n    }\n\n    return function cleanup() {\n      if (socketRef.current) {\n        console.log('cleaning up the index data streams')\n        socketRef.current.close()\n      }\n    }\n  }, [tradingPair])\n\n  return (\n    <Box rounded='lg' bg='gray.700' color='gray.100' p={4} >\n      {tradingPair ? \n        <Grid templateColumns=\"repeat(20, 1fr)\" gap={2} alignItems='center' fontSize='md'>\n          <GridItem colSpan={1}>\n            <Avatar\n              size='sm'\n              name={tradingPair.name}\n              src={tradingPair.symbol}\n              alt=\"coin symbol\" \n            /> \n          </GridItem>\n          <GridItem colSpan={2} >\n            <Text fontSize='lg' fontWeight='semibold'>\n              {tradingPair.name.toUpperCase()}\n            </Text>\n          </GridItem>\n          <GridItem colSpan={2} >\n            {liveMarketData ?\n              <Text >\n                ${thousandsSeparators(parseFloat(liveMarketData.c).toFixed(2))}\n              </Text> \n              : \n              <Skeleton startColor=\"green.600\" endColor=\"orange.600\" height=\"20px\"/>}\n          </GridItem>\n          <GridItem colSpan={2} >\n            {liveMarketData ?\n              <Text color={liveMarketData.P > 0 ? '#1cf200' : '#ff1919'}>\n                {parseFloat(liveMarketData.P).toFixed(2)} %\n              </Text>\n              :\n              <Skeleton startColor=\"green.600\" endColor=\"orange.600\" height=\"20px\"/>}\n          </GridItem>\n          <GridItem colSpan={2} >\n            {liveMarketData ?\n              <Text>\n                ${thousandsSeparators(parseFloat(liveMarketData.h).toFixed(2))}\n              </Text>\n              :\n              <Skeleton startColor=\"green.600\" endColor=\"orange.600\" height=\"20px\"/>}\n          </GridItem>\n          <GridItem colSpan={2}>\n            {liveMarketData ?\n              <Text>\n                ${thousandsSeparators(parseFloat(liveMarketData.l).toFixed(2))}\n              </Text>\n              :\n              <Skeleton startColor=\"green.600\" endColor=\"orange.600\" height=\"20px\"/>}\n          </GridItem>\n          <GridItem colSpan={3}>\n            {liveMarketData ?\n              <Text>\n                ${thousandsSeparators(parseFloat(liveMarketData.c * tradingPair.total_suppy).toFixed(0))}\n              </Text>\n              :\n              <Skeleton startColor=\"green.600\" endColor=\"orange.600\" height=\"20px\"/>}\n          </GridItem>\n          <GridItem colSpan={3}>\n            {liveMarketData ?\n              <Text>\n                {thousandsSeparators(parseFloat(liveMarketData.v).toFixed(0)) + ' ' + ticker}\n              </Text>\n              :\n              <Skeleton startColor=\"green.600\" endColor=\"red.600\" height=\"20px\"/>}\n          </GridItem>\n          <GridItem colSpan={3}>\n            <Link to={`/markets/${tradingPair.name}/`}>\n              <Button bg='gray.200' color='gray.800' w='full'>\n              Trade {tradingPair.ticker}/vUSD\n              </Button>\n            </Link>\n          </GridItem>\n        </Grid>\n        : 'loading markets'}\n    </Box>\n  )\n}\n\nexport default IndexCard","import { Box, ChakraProvider, Container, Grid, GridItem, Heading, Stack, Tab, TabList, TabPanel, TabPanels, Tabs, Text } from '@chakra-ui/react'\nimport React from 'react'\nimport { getAllTradingPairs, getUserProfile } from '../../lib/api'\nimport { getToken } from '../../lib/auth'\nimport IndexCard from './IndexCard'\n\nfunction TradingPairsIndex() {\n\n  const [tradingPairData, setTradingPairData] = React.useState(undefined)\n  const [userData, setUserData] = React.useState(undefined)\n\n  React.useEffect(() => {\n    const getTradingPairData = async () => {\n      try {\n        const { data } = await getAllTradingPairs()\n        setTradingPairData(data)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    \n    const getUserData = async () => {\n      try {\n        const token = getToken()\n        const { data } = await getUserProfile(token)\n        setUserData(data)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    getTradingPairData()\n    getUserData()\n  }, [])\n\n  return (\n    <ChakraProvider>\n      <Container minW='full' minH='container.lg' pr={14} pl={14} overflow='scroll' bg='gray.400' borderColor='black' borderWidth='1px'>\n        <Tabs variant='unstyled' color='gray.100' mt={4}>\n          <TabList>\n            <Tab ml={4} minW='20' bg='gray.700' rounded='md' fontSize='md' fontWeight='semibold' _selected={{ color: 'gray.100', bg: 'gray.800', boxShadow: '2xl' }}>\n              All\n            </Tab>\n            <Tab ml={4} bg='gray.700' rounded='md' fontSize='md' fontWeight='semibold' _selected={{ color: 'gray.100', bg: 'gray.800', boxShadow: '2xl' }}>\n              Favourites\n            </Tab>\n          </TabList>\n\n          <TabPanels>\n            <TabPanel>\n              <Box pb={4} pl={4} pr={4}>\n                <Grid templateColumns=\"repeat(20, 1fr)\" gap={2} alignItems='center' color='gray.800'>\n                  <GridItem colStart={4} colEnd={6}>\n                    <Text fontSize='md'>\n                      Current Price\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={6} colEnd={8}>\n                    <Text fontSize='md'>\n                      24hr Change\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={8} colEnd={10}>\n                    <Text fontSize='md'>\n                      24hr High\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={10} colEnd={12}>\n                    <Text fontSize='md'>\n                      24hr Low\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={12} colEnd={15}>\n                    <Text fontSize='md'>\n                      Market Capitalisation\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={15} colEnd={17}>\n                    <Text fontSize='md'>\n                      24hr Volume\n                    </Text>\n                  </GridItem>\n                </Grid>\n              </Box>\n              {tradingPairData ? \n                <Stack spacing={1} >\n                  {tradingPairData.map(tradingPair => {\n                    return (\n                      <IndexCard key={tradingPair.id} tradingPair={tradingPair} ticker={tradingPair.ticker} />\n                    )\n                  }).sort(function(a, b) {\n                    return a.key - b.key\n                  })}\n                </Stack>\n                :\n                'Loading markets'}\n            </TabPanel>\n            <TabPanel>\n              <Box pb={4} pl={4} pr={4}>\n                <Grid templateColumns=\"repeat(20, 1fr)\" gap={2} alignItems='center' color='gray.800'>\n                  <GridItem colStart={4} colEnd={6}>\n                    <Text fontSize='md'>\n                      Current Price\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={6} colEnd={8}>\n                    <Text fontSize='md'>\n                      24hr Change\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={8} colEnd={10}>\n                    <Text fontSize='md'>\n                      24hr High\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={10} colEnd={12}>\n                    <Text fontSize='md'>\n                      24hr Low\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={12} colEnd={15}>\n                    <Text fontSize='md'>\n                      Market Capitalisation\n                    </Text>\n                  </GridItem>\n                  <GridItem colStart={15} colEnd={17}>\n                    <Text fontSize='md'>\n                      24hr Volume\n                    </Text>\n                  </GridItem>\n                </Grid>\n              </Box>\n              {tradingPairData && userData ? \n                <Stack spacing={1} >\n                  {tradingPairData.filter(tradingPair => tradingPair.favourited_by.includes(userData.id)).map(tradingPair => {\n                    return (\n                      <IndexCard key={tradingPair.id} tradingPair={tradingPair} ticker={tradingPair.ticker} />\n                    )\n                  }).sort(function(a, b) {\n                    return a.key - b.key\n                  })}\n              \n                </Stack>\n                :\n                <Heading color='red.500' fontSize='md' fontWeight='medium'>\n                  You must be logged in to view favourites!\n                </Heading>\n              }\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Container>\n\n\n    </ChakraProvider>\n  )\n}\n\nexport default TradingPairsIndex","import React from 'react'\n\n\nexport default function useForm(initialState) {\n  const [formdata, setFormdata] = React.useState(initialState)\n  const [errors, setErrors] = React.useState(initialState)\n\n  const handleChange = event => {\n\n    const value = event.target.value\n    const nextState = { ...formdata, [event.target.name]: value }\n    setFormdata(nextState)\n    setErrors({ ...errors, [event.target.name]: '' })\n  }\n\n  return {\n    formdata,\n    errors,\n    handleChange,\n    setErrors,\n    setFormdata\n  }\n}\n","/* eslint-disable react/no-children-prop */\nimport { } from '@chakra-ui/icons'\nimport { \n  Button, \n  Divider, \n  FormControl, \n  FormErrorMessage, \n  FormHelperText, \n  InputGroup, \n  InputLeftAddon, \n  InputRightElement, \n  Stack, \n  useToast,\n  Icon,\n  Text,\n  NumberInput,\n  NumberInputField,\n  Center\n} from '@chakra-ui/react'\nimport { FaWallet } from 'react-icons/fa'\nimport React from 'react'\nimport { getToken } from '../../lib/auth'\nimport { createTradePost, get24HourData, getUserProfile, performTrade } from '../../lib/api'\nimport { useParams } from 'react-router-dom'\n\n\nfunction FormTrade({ orderType, tradingPair, setTradingPairDataFound, userData, setUserData }) {\n  const [balanceChangeTicker, setBalanceChangeTicker] = React.useState(false)\n  const [lastPrice, setLastPrice] = React.useState(null)\n  const [error, setError] = React.useState(false)\n  const initialState = {\n    'buy': '',\n    'amount': '',\n    'total': '',\n    'tradingPairName': ''\n  }\n  const [formdata, setFormdata] = React.useState(initialState)\n  const [errors, setErrors] = React.useState(initialState)\n\n  const { name } = useParams()\n  const token = getToken()\n\n  const refreshLastPrice = async () => {\n    try {\n      const { data } = await get24HourData(name)\n      setLastPrice(data.lastPrice)\n    } catch (error) {\n      console.log('Error retrieving latest price data: ', error)\n    }\n  }\n\n  const getUserData = async () => {\n    try {\n      const token = getToken()\n      const { data } = await getUserProfile(token)\n      setUserData(data)\n    } catch (error) {\n      console.log('failed getting user data')\n      console.log(error)\n    }\n  }\n\n  const handleChange = (event) => {\n    if (event.target.name === 'amount') {\n      const amountValue = event.target.value\n      const totalValue = amountValue * lastPrice\n      const nextState = { ...formdata, 'amount': amountValue, 'total': totalValue }\n      setFormdata(nextState)\n      setErrors({ ...errors, [event.target.name]: '' })\n    }\n    if (event.target.name === 'total') {\n      const totalValue = event.target.value\n      const amountValue = (totalValue / lastPrice)\n      const nextState = { ...formdata, 'amount': amountValue, 'total': totalValue }\n      setFormdata(nextState)\n      setErrors({ ...errors, [event.target.name]: '' })\n    }\n  }\n\n  React.useEffect(() => {\n    refreshLastPrice()\n    getUserData()\n  }, [token])\n\n  const handleFocus = (e) => {\n    e.preventDefault()\n    setError(false)\n  }\n\n  const toast = useToast()\n\n  const triggerToast = () => {\n    toast({\n      title: 'Transaction successful!',\n      description: 'Your wallet balances have been updated',\n      status: 'success',\n      duration: 4200,\n      isClosable: true\n    })\n  }\n\n  const thousandsSeparators = (num) => {\n    if (num) {\n      const numParts = num.toString().split('.')\n      numParts[0] = numParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n      return numParts.join('.')  \n    }\n  }\n\n\n  const handleTrade = async event => {\n    event.preventDefault()\n    try {\n      formdata.amount = formdata.total / lastPrice\n      formdata.tradingPairName = tradingPair.name\n      formdata.buy = orderType === 'Buy'\n      const token = getToken()\n      await refreshLastPrice()\n      await performTrade(formdata, token)\n      await createTradePost({\n        'bought_or_sold': formdata.buy,\n        'amount': formdata.amount,\n        'total': formdata.total,\n        'trading_pair': tradingPair.id\n      }, token)\n      triggerToast()\n      getUserData()\n      setTradingPairDataFound(false)\n      setError(false)\n      setFormdata(initialState)\n    } catch (error) {\n      if (!token) {\n        setError('You must be logged in to make trades!')\n      } else if (\n        (\n          orderType === 'Buy' \n          && \n          parseFloat(userData?.cash_balance) < parseFloat(formdata?.total)\n        ) \n        || \n        (\n          orderType === 'Sell' \n          && \n          parseFloat(userData[`${tradingPair?.name}_balance`]) < parseFloat(formdata?.amount)\n        )\n        ||\n        (\n          formdata?.total < 0\n        )\n        ||\n        (\n          formdata?.amount < 0\n        )\n      ) {\n        setError('Insufficient balance!')\n      } else {\n        console.log('unsecpected error: ', error)\n        setError('Something unexpected happened, sorry about that!')\n      }\n    }\n    setTimeout(() => {\n      setError(false)\n    }, 2800)\n    setBalanceChangeTicker(!balanceChangeTicker)\n  }\n\n  return (\n    <form action='submit' onSubmit={handleTrade}>\n      <Stack spacing={2} >\n        <FormControl isRequired>\n          \n          <FormHelperText textAlign='center' color='gray.200'>\n            {userData && tradingPair && token ? \n              <Center pb={3}>\n                <Icon as={FaWallet} color='gray.200' mr={4} />\n                {orderType === 'Buy' ? `$${thousandsSeparators(userData.cash_balance)}` : userData[`${tradingPair.name}_balance`] + ' ' + tradingPair.ticker}\n              </Center> \n              :\n              <Center pb={3}>\n                {!token ? \n                  `Log in to view ${orderType === 'Buy' ? 'vUSD' : tradingPair?.ticker} balance` :\n                  'loading'}\n              </Center>\n            }\n          </FormHelperText>\n          <InputGroup color='gray.200' bg='gray.500' borderRadius='md' borderColor='gray.500'>\n            <InputLeftAddon children='Amount' bg='gray.500'/>\n            <InputRightElement children={tradingPair?.ticker} />\n            <NumberInput bg='gray.500' borderColor='gray.500' min={0.000001} value={formdata?.amount ? parseFloat(formdata.amount) : ''} precision={8} keepWithinRange={true}>\n              <NumberInputField\n                borderColor='gray.500'\n                name='amount' \n                textAlign='right'\n                color='gray.700'\n                type='number'\n                aria-label='Amount' \n                onFocus={handleFocus}\n                onChange={handleChange}\n              />\n            </NumberInput>\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired>\n          <InputGroup color='gray.200' bg='gray.500' borderRadius='md'>\n            <InputLeftAddon children='Total' pr={10} bg='gray.500' borderColor='gray.500'/>\n            <InputRightElement children='vUSD' pr={2}/>\n            <NumberInput min={0.000001} pr={12} value={formdata?.total ? parseFloat(formdata?.total) : ''} precision={2} keepWithinRange={true}>\n              <NumberInputField\n                borderColor='gray.500'\n                name='total'\n                textAlign='right'\n                bg='gray.500'\n                color='gray.700'\n                type='number'\n                onFocus={handleFocus}\n                onChange={handleChange}\n                aria-label='Total' \n              />\n            </NumberInput>\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <Divider />\n        <Text fontSize='sm' textAlign='center' color={error ? 'red.500' : 'gray.100'}>\n          {error ? error : 'Based on ' + tradingPair?.ticker + ' = ' + parseFloat(lastPrice).toPrecision(7) + ' vUSD'}\n        </Text>\n        <Text fontSize='xs' textAlign='center' color='gray.100'>\n          (Exchange rate at point of sale may vary)\n        </Text>\n        <Divider />\n        <Button\n          type='submit'\n          variant='solid'\n          fontSize='lg'\n          bg={orderType === 'Buy' ? '#0dd410' : '#f02b42'}\n          name={orderType}\n          color='gray.100'\n          boxShadow='sm'\n          _hover={{ \n            boxShadow: 'md', \n            color: 'black' \n          }, \n          orderType === 'Buy' ? { \n            bg: '#1cf200', \n            color: 'gray.800' \n          } : { \n            bg: '#ff1919', \n            color: 'gray.800' \n          }}\n        >\n          {orderType} {tradingPair?.ticker}\n        </Button>\n      </Stack>\n    </form>\n  )\n}\n\nexport default FormTrade","import { Box, Center, Heading } from '@chakra-ui/layout'\nimport { createChart, CrosshairMode } from 'lightweight-charts'\nimport React from 'react'\nimport { useParams } from 'react-router'\nimport { get24HourData, getHistoricalData } from '../../lib/api'\n\nfunction Chart({ interval, tradingPair, setLastDayData }) {\n  const [candleSeries, setCandleSeries] = React.useState(undefined)\n  const [chartHasGenerated, setChartHasGenerated] = React.useState(false)\n  \n  const ref = React.useRef()\n  const socketRef = React.useRef()\n\n  let chart = undefined\n  let dayVolumeTicker = 0\n\n  const { name } = useParams()\n\n  const generateChart = async () => {\n    chart = createChart(ref.current, {\n      width: window.innerWidth / 2 - 16,\n      height: (7 * (window.innerHeight / 14) - 56),\n      layout: {\n        backgroundColor: '#2D3748',\n        textColor: '#EDF2F7'\n      },\n      grid: {\n        vertLines: {\n          color: 'rgba(197, 203, 206, 0.5)'\n        },\n        horzLines: {\n          color: 'rgba(197, 203, 206, 0.5)'\n        }\n      },\n      crosshair: {\n        mode: CrosshairMode.Normal\n      },\n      rightPriceScale: {\n        borderColor: 'rgba(197, 203, 206, 0.8)'\n      },\n      timeScale: {\n        borderColor: 'rgba(197, 203, 206, 0.8)'\n      }\n    })\n    setCandleSeries(chart.addCandlestickSeries({\n      upColor: '#0dd410',\n      downColor: '#de283d',\n      borderDownColor: '#de283d',\n      borderUpColor: '#0dd410',\n      wickDownColor: '#de283d',\n      wickUpColor: '#0dd410'\n    }))\n  }\n\n  const getLastDayData = async () => {\n    try {\n      const { data } = await get24HourData(name)\n      setLastDayData(data)\n      dayVolumeTicker ++\n    } catch (error) {\n      console.log('Error retrieving 24 hr data: ', error)\n    }\n  }\n\n  const getHistoricalKline = async () => {\n    try {\n      const { data } = await getHistoricalData(name, interval)\n      candleSeries.setData(data)\n    } catch (error) {\n      console.log('Error retrieving candleSeries data from binance API: ', error)\n    }\n  }\n\n  const getLiveCandlestickUpdates = () => {\n    if (tradingPair && socketRef.current) {\n      console.log('Closing the Web Socket... Bye!')\n      socketRef.current.close()\n    }\n    socketRef.current = new WebSocket(`wss://stream.binance.com:9443/ws/${tradingPair.ticker.toString().toLowerCase()}busd@kline_${interval}`)\n    socketRef.current.onmessage = async (event) => {\n      const message = JSON.parse(event?.data)\n      const candlestick = message.k\n      if (candleSeries.ed.dd.H_[candleSeries.ed.dd.H_.length - 1] && candlestick.t / 1000 >= candleSeries.ed.dd.H_[candleSeries.ed.dd.H_.length - 1].P.Cs) {\n        candleSeries.update({\n          time: candlestick.t / 1000,\n          open: candlestick.o,\n          high: candlestick.h,\n          low: candlestick.l,\n          close: candlestick.c\n        })\n        if (dayVolumeTicker % 2 === 0) {\n          getLastDayData()\n        } else {\n          dayVolumeTicker ++\n        }\n      }\n    }\n  }\n\n\n  React.useEffect(() => {\n\n    if (!chartHasGenerated) {\n      generateChart()\n      setChartHasGenerated(true)\n    }\n\n    if (candleSeries && tradingPair) {\n      getHistoricalKline()\n      getLastDayData()\n      getLiveCandlestickUpdates()\n    }\n\n    return function cleaup() {\n      if (socketRef.current) {\n        console.log('Closing the Web Socket... Bye!')\n        socketRef.current.close()\n      }\n    }\n\n  }, [interval, candleSeries, tradingPair])\n\n  return (\n    <Heading>\n      {ref ? \n        <Center>\n          <Box ref={ref}></Box>\n        </Center> : <p>loading chart</p>}\n    </Heading>\n  )\n}\n\nexport default Chart","/* eslint-disable react/no-children-prop */\nimport React from 'react'\n// import * as SockJS from 'sockjs-client'\nimport { useParams } from 'react-router-dom'\nimport { getOneTradingPair, createComment, getUserProfile, favouriteCoin, unfavouriteCoin } from '../../lib/api'\nimport useForm from '../utils/useForm'\nimport { \n  ChakraProvider, \n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItemOption,\n  MenuOptionGroup,\n  Button,\n  Grid, \n  GridItem,\n  Box,\n  Container,\n  Center,\n  Flex,\n  useToast,\n  Avatar,\n  Text,\n  Spacer,\n  Heading,\n  Stack,\n  FormControl,\n  InputGroup,\n  InputLeftElement,\n  Textarea,\n  Radio,\n  RadioGroup,\n  Icon\n} from '@chakra-ui/react'\nimport { ChatIcon, ChevronDownIcon, EditIcon } from '@chakra-ui/icons'\nimport { BsStar, BsStarFill } from 'react-icons/bs'\nimport { getPayload, getToken } from '../../lib/auth'\nimport FormTrade from './FormTrade'\nimport Chart from './Chart'\n\nfunction TradingPairShow() {\n  const [tradingPair, setTradingPair] = React.useState(undefined)\n  const [lastDayData, setLastDayData] = React.useState(undefined)\n  const [interval, setInterval] = React.useState('2h')\n  const [userData, setUserData] = React.useState(undefined)\n  const [tradingPairDataFound, setTradingPairDataFound] = React.useState(false)\n  \n  const commentsEndRef = React.useRef()\n  const { name } = useParams()\n  const toast = useToast()\n  const { formdata, handleChange, setFormdata } = useForm({\n    text: ''\n  })\n\n  const token = getToken()\n\n  const getUserData = async () => {\n    try {\n      const token = getToken()\n      const { data } = await getUserProfile(token)\n      setUserData(data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleFavourite = async () => {\n    try {\n      const token = getToken()\n      if (tradingPair.favourited_by.some(user => user.id === userData.id)) {\n        await unfavouriteCoin(name, token)\n        toast({\n          title: 'Unfavourited!',\n          description: 'Nevermind, plenty more blocks in the chain',\n          status: 'warning',\n          duration: 4200,\n          isClosable: true\n        })\n      } else {\n        await favouriteCoin(name, token)\n        toast({\n          title: 'Favourited!',\n          description: 'Access this coin faster from your Favourites tab',\n          status: 'success',\n          duration: 4200,\n          isClosable: true\n        })\n      }\n      setTradingPairDataFound(false)\n      \n    } catch (error) {\n      console.log('error favouriting coin: ', error)\n    }\n  }\n\n  const handleComment = async (e) => {\n    e.preventDefault()\n    try {\n      const token = getToken()\n      formdata.trading_pair = tradingPair.id\n      await createComment(formdata, token)\n      setFormdata(\n        {\n          'text': '',\n          'bull_or_bear': '',\n          'trading_pair': tradingPair.id\n        }\n      )\n      setTradingPairDataFound(false)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const thousandsSeparators = (num) => {\n    const numParts = num.toString().split('.')\n    numParts[0] = numParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    return numParts.join('.')\n  }\n\n  const getTradingPairData = async () => {\n    try {\n      const { data } = await getOneTradingPair(name)\n      setTradingPair(data)\n    } catch (error) {\n      console.log('Error retrieving trading pair data from django: ', error)\n    }\n  }\n\n  React.useEffect(() => {\n    const scrollToBottomComments = () => {\n      commentsEndRef.current?.scrollIntoView({ behaviour: 'smooth' })\n    }\n    if (tradingPairDataFound && tradingPair) {\n      scrollToBottomComments()\n    }\n  }, [tradingPairDataFound, tradingPair])\n\n  React.useEffect(() => {\n    getUserData()\n\n    if (!tradingPairDataFound) {\n      getTradingPairData()\n      setTradingPairDataFound(true)\n    }\n  }, [tradingPairDataFound, token])\n\n  return (\n    <>\n      <ChakraProvider>\n        <Container maxW='100%' maxH='100%' p={0} >\n          <Grid\n            padding='10px'\n            bg='gray.400'\n            w='100%'\n            maxH='92vh'\n            templateRows=\"repeat(14, 1fr)\"\n            templateColumns=\"repeat(4, 1fr)\"\n            gap={3}\n          >\n            <GridItem rowStart={1} rowEnd={3} colStart={1} colEnd={2} borderRadius='lg' bg='gray.400' boxShadow='dark-lg' rounded='lg' overflow='scroll'>\n              <Box>\n                {tradingPair ?\n                  <>\n                    <Heading fontSize='xl' color='gray.100' bg='gray.700' textAlign='center' fontWeight='medium' mb={2}>\n                      About {tradingPair.name}\n                    </Heading>\n                    <Text fontSize='sm' color='gray.800'>\n                      {tradingPair.description}\n                    </Text>\n                  </>\n                  : 'data loading'}\n              </Box>\n            </GridItem>\n            <GridItem rowSpan={1} colSpan={2} color='gray.800'>\n              <Flex borderRadius='lg'>\n                {tradingPair ? \n                  <Center>\n                    <Avatar\n                      size='md'\n                      name={tradingPair.name}\n                      src={tradingPair.symbol}\n                      alt=\"coin symbol\" \n                    /> \n                    <Heading fontSize='xl' ml={3} fontWeight='medium'>\n                      {tradingPair.name.toUpperCase() + '  (' + tradingPair.ticker + ')'} \n                    </Heading>\n                  </Center>\n                  : 'data loading'}\n\n                <Spacer />\n                <Center>\n                  <Text fontSize='lg'>\n                  24h Trading Volume: {lastDayData && tradingPair ? thousandsSeparators(parseFloat(lastDayData?.volume).toFixed(2)) + ' ' + tradingPair.ticker : 'Loading...'}\n                  </Text>\n                </Center>\n                <Spacer />\n                <Center>\n                  <Menu placement='right' flip>\n                    <MenuButton as={Button} rightIcon={<ChevronDownIcon />} bg='gray.700' color='gray.100' _expanded={{ boxShadow: 'md', bg: 'gray.800', color: 'white' }} _hover={{ boxShadow: 'md', bg: 'gray.800', color: 'white' }}>\n                      {interval === '2h' ? 'Interval' : interval}\n                    </MenuButton>\n                    <MenuList overflow='visible'>\n                      <MenuOptionGroup title='Interval' type='radio'>\n                        <MenuItemOption \n                          value='1m' \n                          onClick={() => {\n                            setInterval('1m')\n                          }}\n                        >1 minute\n                        </MenuItemOption>\n                        <MenuItemOption \n                          value='5m'\n                          onClick={() => {\n                            setInterval('5m')\n                          }}\n                        >5 minutes\n                        </MenuItemOption>\n                        <MenuItemOption \n                          value='15m' \n                          onClick={() => {\n                            setInterval('15m')\n                          }}\n                        >15 minutes\n                        </MenuItemOption>\n                        <MenuItemOption \n                          value='1h' \n                          onClick={() => {\n                            setInterval('1h')\n                          }}\n                        >1 hour\n                        </MenuItemOption>\n                        <MenuItemOption \n                          value='4h'\n                          onClick={() => {\n                            setInterval('4h')\n                          }}\n                        >4 hours\n                        </MenuItemOption>\n                        <MenuItemOption \n                          value='8h'\n                          onClick={() => {\n                            setInterval('8h')\n                          }}\n                        >8 hours\n                        </MenuItemOption>\n                        <MenuItemOption \n                          value='1d'\n                          onClick={() => {\n                            setInterval('1d')\n                          }}\n                        >1 day\n                        </MenuItemOption>\n                      </MenuOptionGroup>\n                    </MenuList>\n                  </Menu>\n                </Center>\n              </Flex>     \n            </GridItem>\n            <GridItem rowStart={2} rowEnd={9} colStart={2} colEnd={4} borderRadius='lg' borderColor='gray.500' border='1px' overflow='hidden'>\n              <Chart tradingPair={tradingPair} interval={interval} setLastDayData={setLastDayData} />\n            </GridItem>\n            <GridItem rowStart={1} rowEnd={3} colStart={4} colEnd={5} borderRadius='lg' bg='gray.400' boxShadow='dark-lg' rounded='lg' overflow='scroll'>\n              <Box>\n                <Heading fontSize='xl' color='gray.100' bg='gray.700' textAlign='center' fontWeight='medium' mb={5}>\n                  Favourited By\n                </Heading>\n                <Stack direction='row'>\n                  {userData && tradingPair && token ? \n                    <>\n                      {tradingPair.favourited_by.some(user => user.id === userData.id) ? \n                        <Center \n                          borderRadius='md'\n                          fontSize='xx-large'\n                          ml={2}\n                          p={2}\n                          bg='gray.400'\n                          color='gray.700'\n                          boxShadow='sm'\n                          _hover={{ boxShadow: 'md', bg: 'gray.500', color: 'gray.700' }}\n                          onClick={() => handleFavourite()}>\n                          <Icon as={BsStarFill}/> \n                        </Center>\n                        : \n                        <Center \n                          borderRadius='md'\n                          ml={2}\n                          p={2}\n                          fontSize='xx-large'\n                          bg='gray.400'\n                          color='gray.700'\n                          boxShadow='sm'\n                          _hover={{ boxShadow: 'md', bg: 'gray.500', color: 'gray.700' }}\n                          onClick={() => handleFavourite()}>\n                          <Icon as={BsStar}/> \n                        </Center>\n                      }\n                    </>\n                    :\n                    ''}\n                  {tradingPair?.favourited_by?.length ?\n                    <>\n                      {tradingPair.favourited_by.map(user => {\n                        return (\n                          <Avatar ml={3} key={user.id} size='md' src={user.profile_image} />\n                        )\n                      })}\n                    </>\n                    : 'Nobody has favourited this coin yet... Sounds like a buying opportunity to me!'}\n                </Stack>\n              </Box>\n            </GridItem>\n            <GridItem rowStart={3} rowEnd={12} colStart={1} colEnd={2} borderRadius='lg' bg='gray.400' boxShadow='2xl' rounded='lg' overflow='scroll'>\n              <Box>\n                <Heading fontSize='xl' color='gray.100' bg='gray.700' textAlign='center' fontWeight='medium' mb={5}>\n                  Sentiment\n                </Heading>\n                {tradingPair ? \n                  <Stack spacing={3}>\n                    {tradingPair.comments?.map(comment => {\n                      return (\n                        <Flex key={comment.id}>\n                          {comment.owner.id === getPayload().sub ?\n                            <>\n                              <Spacer />\n                              <Flex direction='column' bg='gray.700' rounded='md' boxShadow='inner' alignSelf='flex-end' p={2} minW='50%'>\n                                <Flex>\n                                  <Heading fontSize=\"xl\" mb={0}>{comment.bull_or_bear ? '🐮' : '🐻'} </Heading>\n                                  <Spacer />\n                                  <Heading color='gray.100' fontSize=\"md\" mb={0}>{comment.owner.username}</Heading>\n                                </Flex>\n                                <Text mt={1} fontSize='sm' color='gray.100'>{comment.text}</Text>\n                              </Flex>\n                              <Avatar size='sm' name={comment.owner.username} src={comment.owner.profile_image} ml={1}/>\n                            </>\n                            :\n                            <>\n                              <Avatar size='sm' name={comment.owner.username} src={comment.owner.profile_image} mr={1}/>\n                              <Flex direction='column' bg='gray.700' rounded='md' boxShadow='inner' p={2} minW='50%'>\n                                <Flex>\n                                  <Heading color='gray.100' fontSize=\"md\" mb={0}>{comment.owner.username}</Heading>\n                                  <Spacer />\n                                  <Heading fontSize=\"xl\" mb={0}>{comment.bull_or_bear ? '🐮' : '🐻'} </Heading>\n                                </Flex>\n                                <Text mt={1} fontSize='sm' color='gray.100'>{comment.text}</Text>\n                              </Flex>\n                            </>\n                          }\n                          \n                        </Flex>\n                      )\n                    })}\n                    <div ref={commentsEndRef} />\n                  </Stack>\n                  : 'data loading'}\n              </Box>\n            </GridItem>\n            <GridItem rowStart={12} rowEnd={15} colStart={1} colEnd={2} bg='gray.400' boxShadow='dark-lg' rounded='lg'>\n              <form action='submit' onSubmit={handleComment} >\n                <Flex>\n                  <RadioGroup\n                    spacing={2} \n                    mt={2} \n                    name='rating' \n                    value={formdata.bull_or_bear}>\n                    <Stack direction=\"row\" color='gray.800'>\n                      <Radio \n                        ml={3}\n                        isRequired \n                        isChecked={false} \n                        name='bull_or_bear' \n                        value='true' \n                        onChange={handleChange}\n                      >Bull 🐮\n                      </Radio>\n                      <Radio \n                        // isDisabled={error} \n                        isChecked={false} \n                        name='bull_or_bear' value='false' \n                        onChange={handleChange}\n                      >Bear 🐻\n                      </Radio>\n                    </Stack>\n                  </RadioGroup>\n                  <Spacer />\n                  <Button\n                    type='submit'\n                    alignSelf='center'\n                    align='right'\n                    variant='solid' \n                    bg='gray.700'\n                    color='gray.100'\n                    boxShadow='sm'\n                    _hover={{ boxShadow: 'md', bg: 'gray.800', color: 'white' }}\n                  >\n                    <EditIcon mr={3}/>Post\n                  </Button>                         \n                </Flex>                                        \n                <FormControl isRequired>\n                  <InputGroup>\n                    <InputLeftElement color='gray.100'  children={<ChatIcon />}/>\n                    <Textarea\n                      type='text'\n                      pl={8}\n                      size='lg'\n                      name='text'\n                      bg='gray.700'\n                      color='gray.200'\n                      minH={window.innerHeight / 9}\n                      onChange={handleChange}\n                      value={formdata.text}\n                      placeholder={'Join the conversation'}\n                      aria-label='description'\n                    />\n                  </InputGroup>\n                </FormControl>\n              </form>\n            </GridItem>\n            <GridItem rowStart={9} rowEnd={15} colSpan={2} borderRadius='lg'>\n              <Grid\n                padding='10px'\n                bg='gray.700'\n                w='full'\n                h='full'\n                templateRows=\"repeat(4, 1fr)\"\n                templateColumns=\"repeat(2, 1fr)\"\n                gap={2}\n                borderRadius='lg'>\n                <GridItem rowSpan={6} colSpan={1}>\n                  <FormTrade \n                    tradingPair={tradingPair}\n                    setTradingPairDataFound={setTradingPairDataFound}\n                    userData={userData}\n                    setUserData={setUserData}\n                    orderType='Buy'></FormTrade>\n                </GridItem>\n                <GridItem rowSpan={6} colSpan={1}>\n                  <FormTrade \n                    tradingPair={tradingPair}\n                    setTradingPairDataFound={setTradingPairDataFound}\n                    setUserData={setUserData}\n                    userData={userData} \n                    orderType='Sell'></FormTrade>\n                </GridItem>           \n              </Grid>\n            </GridItem>\n            <GridItem rowStart={3} rowEnd={15} colStart={4} colEnd={4} borderRadius='lg' borderColor='tomato' bg='gray.400' overflow='scroll'>\n              <Box>\n                <Heading fontSize='xl' color='gray.100' bg='gray.700' textAlign='center' fontWeight='medium' mb={5}>\n                  Recent Trades\n                </Heading>\n                <Stack spacing={3}>\n                  {tradingPair?.trade_posts.map(post => {\n                    return (\n                      <Flex key={post.id} direction='column' bg='gray.700' borderRadius='md' p={2} minW='50%' color='gray.200'>\n                        <Flex>\n                          <Text fontWeight='bold' color={post.bought_or_sold ? '#0dd410' : '#ff1919'}>\n                            {post.bought_or_sold ? 'BUY' : 'SELL'}\n                          </Text>\n                          <Spacer />\n                          <Text textAlign='right' fontSize='sm'>\n                            {new Date(post.created_at).toLocaleDateString('en-GB') + ' '}\n                            at\n                            {' ' + new Date(post.created_at).toLocaleTimeString('en-GB')}\n                          </Text>\n                        </Flex>\n                        <Flex color={post.bought_or_sold ? '#0dd410' : '#ff1919'}>\n                          <Text>\n                            {thousandsSeparators(post.amount.toPrecision(3))}\n                          </Text>\n                          <Spacer />\n                          <Text>\n                            at\n                          </Text>\n                          <Spacer />\n                          <Text>\n                            ${thousandsSeparators((post.total / post.amount).toFixed(2))}\n                          </Text>\n                          <Spacer />\n                          <Text>\n                            /\n                          </Text>\n                          <Spacer />\n                          <Text>\n                            {tradingPair.ticker}\n                          </Text>\n                          <Spacer />\n                          <Spacer />\n                          <Spacer />\n                          <Text color='gray.200' fontWeight='semibold'>\n                            - {post.owner.username}\n                          </Text>\n                        </Flex>\n                      </Flex>\n                    )\n                  }).reverse()}\n                </Stack>\n              </Box>\n            </GridItem>\n          </Grid>\n        </Container>\n      </ChakraProvider>\n    </>\n  )\n}\n\nexport default TradingPairShow","/* eslint-disable react/no-children-prop */\nimport React from 'react'\nimport axios from 'axios'\nimport { Input, Image, InputGroup, InputLeftElement } from '@chakra-ui/react'\nimport { CgProfile } from 'react-icons/cg'\n\n\nfunction ImageUploadField({ value, name, onChange }) {\n\n  const uploadUrl = process.env.REACT_APP_CLOUDINARY_URL\n  const secondaryUploadPreset = process.env.REACT_APP_CLOUDINARY_SECONDARY_PRESET\n  const uploadPreset = process.env.REACT_APP_CLOUDINARY_PRESET\n\n  const handleUpload = async event => {\n    const data = new FormData()\n    data.append('file', event.target.files[0])\n    \n    try {\n      data.append('upload_preset', uploadPreset)\n      const res = await axios.post(uploadUrl, data)\n      onChange({ target: { name, value: res.data.url } })\n    } catch (error) {\n      console.log('AI Face Detection Limit Reached: ', error)\n      data.delete('upload_preset')\n      data.append('upload_preset', secondaryUploadPreset)\n      const res = await axios.post(uploadUrl, data)\n      onChange({ target: { name, value: res.data.url } })\n    }\n  }\n  return (\n    <>\n      {value ?\n        <Image\n          boxSize='150px'\n          objectFit='cover'\n          src={value}\n          alt='profile image'\n\n        />\n        :\n        <InputGroup>\n          <InputLeftElement children={<CgProfile />} />\n          <Input\n            pt={1}\n            color='gray.700'\n            className='input'\n            type='file'\n            onChange={handleUpload}\n          />\n        </InputGroup>\n      }\n    </>\n  )\n}\nexport default ImageUploadField","/* eslint-disable react/no-children-prop */\nimport React from 'react'\n\nimport useForm from '../utils/useForm'\nimport { registerUser } from '../../lib/api'\n// import { setToken } from '../../lib/auth'\nimport { \n  Button, \n  Divider, \n  FormControl, \n  FormHelperText,\n  FormErrorMessage,\n  Input, \n  InputGroup, \n  InputLeftElement, \n  Stack,\n  useToast\n} from '@chakra-ui/react'\nimport { EmailIcon, LockIcon, AtSignIcon } from '@chakra-ui/icons'\nimport ImageUploadField from './ImageUploadField'\n\nfunction FormRegister({ registered }) {\n  const [error, setError] = React.useState(false)\n  const { formdata, handleChange } = useForm({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    profile_image: ''\n  })\n\n  const handleFocus = () => {\n    setError(false)\n  }\n\n  const toast = useToast()\n\n  const triggerToast = () => {\n    toast({\n      title: 'Registration successful',\n      description: 'Please log in to your new account',\n      status: 'success',\n      duration: 5000,\n      isClosable: true\n    })\n  }\n\n  const handleRegister = async event => {\n    event.preventDefault()\n    try {\n      await registerUser(formdata)\n        .then(response => {\n          if (response.status === 201) {\n            console.log('registration successful')\n            registered()\n            triggerToast()\n          }\n        })\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        if (error.response.data.email) {\n          return setError('An account under this email already exists')\n        } else if (error.response.data.username) {\n          return setError('This username is already taken')\n        } else if (error.response.data.password_confirmation) {\n          return setError('Password confirmation does not match')\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        return console.log(error.request)\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        return setError('An unexpected error occured, sorry about this! ', error.message)\n      }\n      return console.log(error.config)\n    }\n  }\n\n  return (\n    <form action='submit' onSubmit={handleRegister}>\n      <Stack spacing={2}>\n        <FormControl isRequired>\n          <FormHelperText textAlign='center'>\n          New to eTavros? Sign up!\n            <br />\n            <br />\n          </FormHelperText>\n          <InputGroup>\n            <InputLeftElement children={<EmailIcon />} />\n            <Input\n              type='email'\n              name='email'\n              onFocus={handleFocus}\n              onChange={handleChange}\n              value={formdata.email}\n              placeholder='Email' \n              aria-label='Email' \n            />\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired>\n          <InputGroup>\n            <InputLeftElement children={<AtSignIcon />} />\n            <Input \n              type='text'\n              name='username'\n              onFocus={handleFocus}\n              onChange={handleChange}\n              value={formdata.username}\n              placeholder='Username' \n              aria-label='username' />\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired>\n          <InputGroup>\n            <InputLeftElement children={<LockIcon />} />\n            <Input \n              type='password'\n              name='password'\n              onFocus={handleFocus}\n              onChange={handleChange}\n              value={formdata.password}\n              placeholder='Password' \n              aria-label='Password' />\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired>\n          <InputGroup>\n            <InputLeftElement children={<LockIcon />} />\n            <Input \n              type='password'\n              name='password_confirmation'\n              onFocus={handleFocus}\n              onChange={handleChange}\n              value={formdata.password_confirmation}\n              placeholder='Confirm Password' \n              aria-label='Password Confirmation' />\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired>\n          <InputGroup>\n            <ImageUploadField              \n              value={formdata.profile_image}\n              name='profile_image'\n              onChange={handleChange}\n            />\n          </InputGroup>\n          {error ? <FormHelperText textAlign='center' color='red.500'>\n            {error}\n          </FormHelperText> : <FormHelperText textAlign='center'>\n            We will never share your data\n          </FormHelperText>}\n        </FormControl>\n        <Divider />\n        <Button\n          type='submit' \n          variant='solid' \n          bg='gray.700'\n          color='gray.100'\n          boxShadow='sm'\n          _hover={{ boxShadow: 'md', bg: 'gray.800', color: 'white' }}\n        >\n            Sign Up!\n        </Button>\n      </Stack>\n    </form>\n\n  )\n}\n\nexport default FormRegister","/* eslint-disable react/no-children-prop */\nimport React from 'react'\n\nimport useForm from '../utils/useForm'\nimport { loginUser } from '../../lib/api'\nimport { setToken } from '../../lib/auth'\nimport { \n  Button, \n  Divider, \n  FormControl, \n  FormHelperText,\n  FormErrorMessage,\n  Input, \n  InputGroup, \n  InputLeftElement, \n  Stack,\n  useToast\n} from '@chakra-ui/react'\nimport { EmailIcon, LockIcon } from '@chakra-ui/icons'\n\nfunction FormLogin({ loggedIn, getUserData }) {\n  const [error, setError] = React.useState(false)\n  const { formdata, handleChange } = useForm({\n    credential: '',\n    password: ''\n  })\n\n  const handleFocus = () => {\n    setError(false)\n  }\n\n  const toast = useToast()\n\n  const triggerToast = () => {\n    toast({\n      title: 'Welcome back',\n      description: 'Happy trading!',\n      status: 'success',\n      duration: 5000,\n      isClosable: true\n    })\n  }\n\n  const handleLogin = async event => {\n    event.preventDefault()\n    try {\n      await loginUser(formdata)\n        .then(response => {\n          if (response.status === 200) {\n            console.log('log in successful', response.data)\n            loggedIn()\n            triggerToast()\n            setToken(response.data.token)\n            getUserData()\n          }\n        })\n    } catch (e) {\n      setError('Login details are incorrect')\n    }\n  }\n\n  return (\n    <form action='submit' onSubmit={handleLogin}>\n      <Stack spacing={2}>\n        <FormControl isRequired>\n          <FormHelperText textAlign='center' color={error && 'red.500'}>\n            {error ? error : 'Log in and get trading!'}\n            <br />\n            <br />\n          </FormHelperText>\n          <InputGroup>\n            <InputLeftElement children={<EmailIcon />} />\n            <Input\n              type='text'\n              name='credential'\n              onFocus={handleFocus}\n              onChange={handleChange}\n              value={formdata.credential}\n              placeholder='Email or username' \n              aria-label='Email or username' \n            />\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <FormControl isRequired>\n          <InputGroup>\n            <InputLeftElement children={<LockIcon />} />\n            <Input \n              type='password'\n              name='password'\n              onFocus={handleFocus}\n              onChange={handleChange}\n              value={formdata.password}\n              placeholder='Password' \n              aria-label='Password' />\n          </InputGroup>\n          <FormErrorMessage>{error.name}</FormErrorMessage>\n        </FormControl>\n        <Divider />\n        <Button\n          type='submit' \n          variant='solid' \n          bg='gray.700'\n          color='gray.100'\n          boxShadow='sm'\n          _hover={{ boxShadow: 'md', bg: 'gray.800', color: 'white' }}\n        >\n            Log in!\n        </Button>\n      </Stack>\n    </form>\n  )\n}\n\nexport default FormLogin","import { \n  ChakraProvider,\n  Flex,\n  Spacer,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  Popover,\n  Button,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Icon,\n  Text,\n  useToast,\n  Divider,\n  Box,\n  extendTheme,\n  Heading\n} from '@chakra-ui/react'\nimport React from 'react'\nimport FormRegister from './FormRegister'\nimport FormLogin from './FormLogin'\nimport FocusLock from 'react-focus-lock'\nimport { FaWallet } from 'react-icons/fa'\nimport { Link } from 'react-router-dom'\nimport { getToken, logoutUser } from '../../lib/auth'\nimport { get24HourData, getAllTradingPairs, getUserProfile } from '../../lib/api'\nimport '@fontsource/electrolize' \n\n\nfunction Nav() {\n\n  const theme = extendTheme({\n    fonts: {\n      heading: 'Electrolize'\n    }\n  })\n\n  const [isOpenLogin, setIsOpenLogin] = React.useState(false)\n  const [isOpenRegister, setIsOpenRegister] = React.useState(false)\n  const [isOpenWallet, setIsOpenWallet] = React.useState(false)\n\n  const [userData, setUserData] = React.useState(undefined)\n  const [tradingPairsArray, setTradingPairsArray] = React.useState([])\n  const [totalPortfolioValue, setTotalPortfolioValue] = React.useState(undefined)\n\n  let dollarValuesArray = []\n  let walletBalancesArray = []\n\n  const toast = useToast()\n\n  const closeRegister = () => {\n    setIsOpenRegister(false)\n  }\n  const openRegister = () => {\n    setIsOpenRegister(true)\n  }\n\n  const closeLogin = () => {\n    setIsOpenLogin(false)\n  }\n  const openLogin = () => {\n    setIsOpenLogin(true)\n  }\n\n  const closeWallet = () => {\n    setIsOpenWallet(false)\n  }\n  const openWallet = () => {\n    getUserData()\n    setIsOpenWallet(true)\n  }\n\n  const getTradingPairsArray = async () => {\n    try {\n      const { data } = await getAllTradingPairs()\n      setTradingPairsArray(data)\n    } catch (error) {\n      console.log('Error retrieving trading pairs array: ', error)\n    }\n  }\n\n  const getLastPrice = async (coin) => {\n    try {\n      const { data } = await get24HourData(coin)\n      dollarValuesArray.push({\n        ticker: data.symbol.split('BUSD').join('').toUpperCase(),\n        lastPrice: parseFloat(data.lastPrice)\n      })\n      if (dollarValuesArray.length === tradingPairsArray.length) {\n        dollarValuesArray.map(lastPriceObject => {\n          return multiplyLastPriceAndBalance(lastPriceObject)\n        })\n      }\n    } catch (error) {\n      console.log('Error retrieving latest price data: ', error)\n    }\n  }\n\n  const multiplyLastPriceAndBalance = (lastPriceObject) => {\n    const relevantCoin = tradingPairsArray.find(tradingPair => tradingPair.ticker.toUpperCase() === lastPriceObject.ticker).name\n    if (walletBalancesArray.length < 1) {\n      walletBalancesArray.push(parseFloat(userData.cash_balance))\n    }\n    walletBalancesArray.push(lastPriceObject.lastPrice * parseFloat(userData[`${relevantCoin}_balance`]))\n    setTotalPortfolioValue(walletBalancesArray.reduce((acc, curr) => acc + curr))\n  }\n\n  const triggerToast = () => {\n    toast({\n      title: 'You are now looged out',\n      description: 'Account functions have been disabled',\n      status: 'warning',\n      duration: 4000,\n      isClosable: true\n    })\n  }\n\n  const thousandsSeparators = (num) => {\n    if (num) {\n      const numParts = num.toString().split('.')\n      numParts[0] = numParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n      return numParts.join('.')\n    }\n  }\n\n  const getUserData = async () => {\n    try {\n      const token = getToken()\n      const { data } = await getUserProfile(token)\n      setUserData(data)  \n    } catch (error) {\n      console.log('failed getting user data: ', error)\n    }\n  }\n\n  const toggleIsOpenLogin = () => {\n    setIsOpenLogin(!isOpenLogin)\n  }\n\n  const handleLogout = () => {\n    logoutUser()\n    setUserData(undefined)\n    triggerToast()\n  }\n\n  React.useEffect(() => {\n    getUserData()\n    getTradingPairsArray()\n  }, [])\n\n  React.useEffect(() => {\n\n    dollarValuesArray = []\n    walletBalancesArray = []\n\n    if (userData && tradingPairsArray) {\n      tradingPairsArray.map(tradingPair => {\n        return getLastPrice(tradingPair.name)\n      })  \n    }\n    \n  }, [tradingPairsArray, userData])\n\n  return (\n    <>\n      <ChakraProvider theme={theme}>\n        <Flex\n          as='nav'\n          align=\"center\"\n          justify=\"space-between\"\n          wrap=\"wrap\"\n          w=\"100%\"\n          pl={4}\n          pr={4}\n          h='8vh'\n          minH='42px'\n          bg='gray.700'\n        >\n          <Link to='/markets/'>\n            <Button display={{ base: 'block', md: 'block' }}\n              flexBasis={{ base: '100%', md: 'auto' }} bg='gray.200' as='button'>\n              Markets\n            </Button>\n          </Link>\n          <Spacer />\n          \n          <Box>\n            <Heading color='gray.300'>\n              eTavros\n            </Heading>\n              \n          </Box>\n          <Spacer />\n          {userData ?\n            <>\n              <Button onClick={openWallet}>View Wallet</Button>\n              <Drawer placement=\"right\" onClose={closeWallet} isOpen={isOpenWallet}>\n                <DrawerOverlay />\n                <DrawerContent>\n                  <DrawerHeader borderBottomWidth=\"1px\" bg='gray.700' color='gray.200' as='nav'>\n                    <Flex justify='space-between'>\n                      \n                      <Text>\n                        <Icon as={FaWallet} color='gray.200' mr={4} />\n                          My Wallet\n                      </Text>\n                      <Text>{userData.username}</Text>\n\n                    </Flex>\n                  </DrawerHeader>\n                  <DrawerBody fontSize='xl' color='gray.800'>\n                    {totalPortfolioValue && userData ?\n                      <Flex justify='space-between'>\n                        <Text>\n                        Total value ($)\n                        </Text>\n                        <Text>\n                          {\n                            thousandsSeparators(totalPortfolioValue.toFixed(2))\n                          }\n                        </Text>\n                      </Flex>\n                      :\n                      ''\n                    }\n                    <Divider mb={4} mt={4}/>\n                    <Flex justify='space-between'>\n                      <Text>\n                        Virtual USD\n                      </Text>\n                      <Text>\n                        ${thousandsSeparators(userData.cash_balance)}\n                      </Text>\n                    </Flex>\n                    <Divider mb={4} mt={4}/>\n                    {tradingPairsArray ?\n                      tradingPairsArray.sort(function(a, b) {\n                        return a.id - b.id\n                      }).map(tradingPair => {\n                        return (\n                          <Flex justify='space-between' key={tradingPair.id}>\n                            <Text>\n                              {tradingPair.name.split('')[0].toUpperCase()}{tradingPair.name.slice(1)}\n                            </Text>\n                            <Text>\n                              {parseFloat(userData[`${tradingPair?.name}_balance`]) ? \n                                thousandsSeparators(userData[`${tradingPair?.name}_balance`])\n                                :\n                                '-'\n                              }\n                            </Text>\n                          </Flex>\n                        )\n                      })\n                      :\n                      ''}\n                    <Spacer />\n                  </DrawerBody>\n                </DrawerContent>\n              </Drawer>\n            </>\n            :\n            <Popover\n              isOpen={isOpenLogin}\n              onOpen={openLogin}\n              onClose={closeLogin}\n              placement=\"left\"\n              closeOnBlur={true}\n              bg='grey.200'\n            >\n              <PopoverTrigger>\n                <Button bg='gray.200' color='gray.800' onClick={toggleIsOpenLogin}\n                >\n                Log in\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent p={5}>\n                <FocusLock returnFocus persistentFocus={false}>\n                  <PopoverArrow />\n                  <PopoverCloseButton bg='gray.700' color='gray.100' _hover={{ boxShadow: 'md', bg: 'pink.700' }}/>\n                  <FormLogin loggedIn={closeLogin} getUserData={getUserData}/>\n                </FocusLock>\n              </PopoverContent>\n            </Popover>}\n          {userData ?\n            <Button bg='gray.200' ml={4} color='gray.800' onClick={handleLogout}>\n                Log out\n            </Button>\n            :\n            <Popover\n              isOpen={isOpenRegister}\n              onOpen={openRegister}\n              onClose={closeRegister}\n              placement=\"left\"\n              closeOnBlur={true}\n              bg='grey.200'\n            >\n              <PopoverTrigger>\n                <Button bg='gray.200' ml={4} color='gray.800'>\n                Register\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent p={5}>\n                <FocusLock returnFocus persistentFocus={false}>\n                  <PopoverArrow />\n                  <PopoverCloseButton bg='gray.700' color='gray.100' _hover={{ boxShadow: 'md', bg: 'pink.700' }}/>\n                  <FormRegister registered={closeRegister} />\n                </FocusLock>\n              </PopoverContent>\n            </Popover>}\n        </Flex>\n      </ChakraProvider>\n    </>\n  )\n}\n\nexport default Nav","import { Box, Center, Container, Divider, Flex, Heading, ListIcon, List, ListItem, Text, Button, ChakraProvider, extendTheme } from '@chakra-ui/react'\nimport { CheckCircleIcon } from '@chakra-ui/icons'\nimport { Link } from 'react-router-dom'\nimport React from 'react'\n\nfunction LandingPage() {\n\n  const theme = extendTheme({\n    fonts: {\n      heading: 'Electrolize'\n    }\n  })\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Container \n        bg='gray.400'\n        minW='100%' \n        minH='92vh' \n        p={0}>\n        <Center h='60vh' >\n          <Box borderWidth='3px' borderColor='gray.800' maxW='60vw' p={5} boxShadow='dark-lg' borderRadius='xl' color='gray.800'>\n            <Flex alignItems='center'>\n              <Heading fontSize='8xl' mr={6}>\n              eTavros\n              </Heading>\n              <Flex direction='column' textAlign='center'>\n                <Heading fontSize='xl' fontWeight='semibold'>\n                  Welcome to eTavros\n                </Heading>\n                <Text fontSize='lg' mb={4}>\n                The virtual cryptocurrency trading platform\n                </Text>\n                <Divider />\n                <List mt={4} mb={4} spacing={2} color='gray.800' textAlign='left' fontSize='sm'>\n                  <ListItem>\n                    <Flex alignItems='center'>\n                      <ListIcon as={CheckCircleIcon} color=\"grey.800\" />\n                      <Text>\n                        Browse, track, & trade the hottest cryptocurrencies on the market                  \n                      </Text>\n                    </Flex>\n                  </ListItem>\n                  <ListItem>\n                    <Flex alignItems='center'>\n                      <ListIcon as={CheckCircleIcon} color=\"grey.800\" />\n                      <Text>\n                        Immerse yourself in a streamlined trading experience with live, interactive candlestick charts\n                      </Text>\n                    </Flex>\n                  </ListItem>\n                  <ListItem>\n                    <Flex alignItems='center'>\n                      <ListIcon as={CheckCircleIcon} color=\"grey.800\" />\n                      <Text>\n                        View other users&apos; trades and ridicule their mistakes\n                      </Text>\n                    </Flex>\n                  </ListItem>\n                  <ListItem>\n                    <Flex alignItems='center'>\n                      <ListIcon as={CheckCircleIcon} color=\"grey.800\" />\n                      <Text>\n                        Watch the value of your portfolio rise and fall with the tides of market sentiment\n                      </Text>\n                    </Flex>\n                  </ListItem>\n                </List>\n                <Link to='/markets/' minW='full'>\n                  <Button \n                    display={{ base: 'block', md: 'block' }}\n                    flexBasis={{ base: '100%', md: 'auto' }} \n                    bg='gray.200' \n                    as='button'\n                    w='full'>\n              Show me the money\n                  </Button>\n                </Link>\n              </Flex>\n            </Flex>\n          </Box>\n        </Center>\n      </Container>\n    </ChakraProvider>\n  )\n}\n\nexport default LandingPage","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport TradingPairsIndex from './components/Trading/TradingPairsIndex'\nimport TradingPairShow from './components/Trading/TradingPairShow'\nimport Nav from './components/common/Nav'\nimport LandingPage from './components/common/LandingPage.js'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route path=\"/markets/:name\" component={TradingPairShow} />\n        <Route path=\"/markets\" component={TradingPairsIndex} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/main.scss'\nimport App from './App'\n\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { extendTheme } from '@chakra-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: 'Zen Dots'\n  }\n})\n\nexport default theme\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root'))"],"sourceRoot":""}